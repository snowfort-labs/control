import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import { DatabaseService } from './services/database';
import { writeFileSync } from 'fs';
import { join } from 'path';
import { platform } from 'os';

// Required node-pty import
import * as pty from 'node-pty';
console.log('[SNOWFORT-PTY] node-pty loaded successfully');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Initialize services
let database: DatabaseService;
const ptyProcesses: { [sessionId: string]: any } = {};

// Engine detection patterns
const enginePatterns = {
  'claude-code': {
    start: [/claude(\s|$)/i, /Claude Code/i, /Welcome to Claude Code/i, /claude\s+code/i],
    working: [/I'm working on/i, /Let me/i, /I'll need to/i, /Processing\.\.\./i, /<function_calls>/i, /Reading file/i, /Searching/i],
    ready: [/How can I help/i, /What would you like/i, /I'm ready/i, /ðŸ¤– Generated with \[Claude Code\]/i, /How can I assist/i],
    error: [/Error:/i, /Failed to/i, /I cannot/i, /refused/i, /Permission denied/i]
  },
  gemini: {
    start: [/gemini/i, /Gemini CLI/i],
    working: [/Generating/i, /Thinking/i],
    ready: [/gemini>/i, /Ready for input/i],
    error: [/Error:/i, /Authentication failed/i]
  },
  codex: {
    start: [/codex/i, /OpenAI Codex/i],
    working: [/Generating code/i, /Processing request/i],
    ready: [/codex>/i, /Ready/i],
    error: [/Error:/i, /API error/i]
  }
};

// Process terminal output for engine detection
function processTerminalOutput(sessionId: string, data: string): void {
  const normalizedData = data.toLowerCase();
  
  // Debug: log all terminal output for troubleshooting
  if (data.toLowerCase().includes('claude') || data.toLowerCase().includes('welcome')) {
    console.log(`[SNOWFORT-DEBUG] Terminal output: "${data}"`);
  }
  
  // Enhanced command detection - look for various patterns
  const commandPatterns = [
    // Claude patterns
    { regex: /(\$ )?claude(\s|$)/i, engine: 'claude-code' },
    { regex: /claude[\s-]code/i, engine: 'claude-code' },
    { regex: /claude\s+--/i, engine: 'claude-code' },
    
    // Gemini patterns  
    { regex: /(\$ )?(gemini|aistudio)(\s|$)/i, engine: 'gemini' },
    { regex: /(gemini|aistudio)\s+--/i, engine: 'gemini' },
    
    // Codex patterns
    { regex: /(\$ )?codex(\s|$)/i, engine: 'codex' },
    { regex: /codex\s+--/i, engine: 'codex' },
    
    // Alternative command patterns
    { regex: /npx\s+@anthropic\/claude/i, engine: 'claude-code' },
    { regex: /npx\s+.*gemini/i, engine: 'gemini' }
  ];
  
  for (const pattern of commandPatterns) {
    if (pattern.regex.test(data)) {
      console.log(`[SNOWFORT-ENGINE] Detected ${pattern.engine} command: ${data.trim()}`);
      updateSessionEngine(sessionId, pattern.engine, 'ready');
      return;
    }
  }
  
  // Detect which engine is running
  for (const [engineType, patterns] of Object.entries(enginePatterns)) {
    // Check for engine start patterns
    if (patterns.start.some(pattern => pattern.test(data))) {
      updateSessionEngine(sessionId, engineType as any, 'ready');
      return;
    }
    
    // Check for working patterns
    if (patterns.working.some(pattern => pattern.test(data))) {
      updateSessionEngine(sessionId, engineType as any, 'working');
      return;
    }
    
    // Check for ready patterns
    if (patterns.ready.some(pattern => pattern.test(data))) {
      updateSessionEngine(sessionId, engineType as any, 'ready');
      return;
    }
    
    // Check for error patterns
    if (patterns.error.some(pattern => pattern.test(data))) {
      updateSessionEngine(sessionId, engineType as any, 'error');
      return;
    }
  }
  
  // Check for specific engine exit patterns first
  if (
    // Claude Code exit patterns
    /\/exit/i.test(data) ||
    /Goodbye.*Claude/i.test(data) ||
    // Gemini exit patterns  
    /^quit$/i.test(data.trim()) ||
    /Goodbye.*Gemini/i.test(data) ||
    // Codex exit patterns
    /^exit$/i.test(data.trim()) ||
    /Goodbye.*Codex/i.test(data)
  ) {
    console.log(`[SNOWFORT-ENGINE] Detected engine exit command: ${data.trim()}`);
    updateSessionEngine(sessionId, null, 'idle');
    return;
  }
  
  // Check for shell prompt return (engine finished)
  if (
    // Common shell prompt patterns
    /^\s*[~$%>]\s+/.test(data) || 
    /\n[~$%>]\s+$/.test(data) ||
    data.endsWith('$ ') ||
    data.endsWith('% ') ||
    data.endsWith('> ') ||
    // More specific patterns for conda/bash/zsh prompts
    /\(\w+\)\s+[\w@.-]+\s+[\w-]+\s+%\s*$/.test(data.trim()) ||  // (base) user@host dir %
    /\(\w+\)\s+[\w@.-]+\s+[\w-]+\s+%\s*/.test(data) ||         // (base) user@host dir % (anywhere in line)
    /[\w@-]+:\s*[\w~/.-]+\s*[$%#]\s*$/.test(data.trim()) ||     // user@host:~/path $
    /^[\w@-]+\s+[\w~/.-]+\s*[$%#]\s*$/.test(data.trim())        // user path $
  ) {
    console.log(`[SNOWFORT-ENGINE] Detected shell prompt, clearing engine for session ${sessionId}`);
    // Small delay to ensure this runs after engine detection
    setTimeout(() => {
      updateSessionEngine(sessionId, null, 'idle');
    }, 200);
  }
}

// Update session with detected engine and status
async function updateSessionEngine(sessionId: string, engineType: string | null, status: string): Promise<void> {
  try {
    const Database = require('better-sqlite3');
    const db = new Database(database.getDatabasePath());
    const session = db.prepare('SELECT * FROM sessions WHERE id = ?').get(sessionId);
    
    if (session) {
      const updates: any = { status };
      
      // Only update active_engine if different
      const currentEngine = session.active_engine;
      if (currentEngine !== engineType) {
        updates.active_engine = engineType;
      }
      
      // Update last_active timestamp
      updates.last_active = new Date().toISOString();
      
      const updateFields = Object.keys(updates).map(key => `${key} = ?`).join(', ');
      const updateValues = Object.values(updates);
      
      db.prepare(`UPDATE sessions SET ${updateFields} WHERE id = ?`).run(...updateValues, sessionId);
      
      console.log(`[SNOWFORT-ENGINE] Session ${sessionId} - Engine: ${engineType || 'none'}, Status: ${status}`);

      // Get the updated session object
      const updatedSessionFromDb = db.prepare('SELECT * FROM sessions WHERE id = ?').get(sessionId) as any;
      const updatedSession = {
        ...updatedSessionFromDb,
        projectId: updatedSessionFromDb.project_id,
        engineType: updatedSessionFromDb.engine_type,
        activeEngine: updatedSessionFromDb.active_engine,
        orderIndex: updatedSessionFromDb.order_index,
        createdAt: updatedSessionFromDb.created_at,
        lastActive: updatedSessionFromDb.last_active,
      };

      // Send the updated session to the renderer process
      const mainWindow = BrowserWindow.getAllWindows()[0];
      if (mainWindow) {
        mainWindow.webContents.send('session:updated', updatedSession);
      }
    }
    
    db.close();
  } catch (error) {
    console.error('Failed to update session engine:', error);
  }
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 900,
    width: 1400,
    minHeight: 600,
    minWidth: 1000,
    title: 'Snowfort Desktop - AI Agent Orchestration Platform',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
    },
    titleBarStyle: 'hiddenInset',
    trafficLightPosition: { x: 20, y: 20 },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // DevTools control for development
  const isDevelopment = process.env.NODE_ENV === 'development';
  const enableDevTools = process.env.ELECTRON_DISABLE_DEVTOOLS !== 'true' && process.env.SNOWFORT_MCP_MODE !== 'true';
  
  if (isDevelopment && enableDevTools) {
    mainWindow.webContents.openDevTools();
  }
  
  // Always enable remote debugging in development for testing
  if (isDevelopment) {
    mainWindow.webContents.debugger.attach('1.3');
    console.log('[SNOWFORT-DEBUG] Remote debugging enabled for Playwright testing');
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  // Initialize services
  database = new DatabaseService();
  
  // Set up IPC handlers
  setupIpcHandlers();
  
  createWindow();
  
  // Write startup state file for MCP detection
  const stateFile = join(app.getPath('userData'), 'startup-state.json');
  writeFileSync(stateFile, JSON.stringify({
    ready: true,
    timestamp: Date.now(),
    pid: process.pid,
    version: app.getVersion()
  }));
  
  console.log('[SNOWFORT-READY] App initialized successfully');
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// IPC Handlers for communication between main and renderer processes
function setupIpcHandlers() {
  // Database operations
  ipcMain.handle('db:getProjects', () => database.getProjects());
  ipcMain.handle('db:getOrganizations', () => database.getOrganizations());
  ipcMain.handle('db:getSessions', (_, projectId?: string) => database.getSessions(projectId));
  ipcMain.handle('db:createProject', (_, name: string, path: string, orgId?: string) => 
    database.createProject(name, path, orgId));
  ipcMain.handle('db:createSession', (_, projectId: string, name: string, engineType?: string) => 
    database.createSession(projectId, name, engineType as any));
  ipcMain.handle('db:updateProject', (_, projectId: string, updates: any) => 
    database.updateProject(projectId, updates));
  ipcMain.handle('db:updateSession', (_, sessionId: string, updates: any) => 
    database.updateSession(sessionId, updates));
  ipcMain.handle('db:deleteSession', (_, sessionId: string) => 
    database.deleteSession(sessionId));

  // File system operations
  ipcMain.handle('fs:selectDirectory', async () => {
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory'],
      title: 'Select Project Directory'
    });
    return result.canceled ? null : result.filePaths[0];
  });

  
  // Test IPC
  ipcMain.handle('test:ping', () => {
    return 'pong';
  });

  // PTY operations
  ipcMain.on('pty:start', (event, sessionId: string, projectPath: string) => {
    // Prevent duplicate PTY processes
    if (ptyProcesses[sessionId]) {
      console.log(`[SNOWFORT-PTY] PTY process already exists for session ${sessionId}`);
      return;
    }

    const shell = platform() === 'win32' ? 'powershell.exe' :
                  platform() === 'darwin' ? 'zsh' :
                  'bash';
    
    const args = platform() === 'darwin' ? [] : (platform() === 'linux' ? ['-q', '/dev/null'] : []);

    const ptyProcess = pty.spawn(shell, args, {
      name: 'xterm-color',
      cols: 80,
      rows: 24,
      cwd: projectPath,
      env: {
        ...process.env,
        PATH: platform() === 'win32'
          ? `${process.env.PATH};${process.env.APPDATA}\npm`
          : `${process.env.PATH}:/opt/homebrew/bin:/usr/local/bin`
      }
    });

    ptyProcess.onData((data: string) => {
      // Debug: log all PTY data
      console.log(`[SNOWFORT-PTY-DATA] Session ${sessionId}: "${data}"`);
      
      // Process terminal output for engine detection
      processTerminalOutput(sessionId, data);
      
      // Send data to renderer for display
      event.sender.send(`pty:data:${sessionId}`, data);
    });

    ptyProcess.onExit(({ exitCode }: { exitCode: number }) => {
      console.log(`[SNOWFORT-PTY] PTY process exited for session ${sessionId} with code ${exitCode}`);
      event.sender.send(`pty:exit:${sessionId}`, exitCode);
      delete ptyProcesses[sessionId];
      // Update session status to indicate process ended
      updateSessionEngine(sessionId, null, 'idle');
    });

    ptyProcesses[sessionId] = ptyProcess;
    console.log(`[SNOWFORT-PTY] Started PTY process for session ${sessionId} in ${projectPath}`);
  });

  ipcMain.on('pty:write', (event, sessionId: string, data: string) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      try {
        ptyProcess.write(data);
      } catch (error) {
        console.error(`[SNOWFORT-PTY] Error writing to PTY ${sessionId}:`, error);
        updateSessionEngine(sessionId, null, 'error');
      }
    } else {
      console.warn(`[SNOWFORT-PTY] No PTY process found for session ${sessionId}`);
    }
  });

  ipcMain.on('pty:resize', (event, sessionId: string, { cols, rows }: { cols: number, rows: number }) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      try {
        ptyProcess.resize(cols, rows);
      } catch (error) {
        console.error(`[SNOWFORT-PTY] Error resizing PTY ${sessionId}:`, error);
      }
    }
  });

  ipcMain.on('pty:kill', (event, sessionId: string) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      console.log(`[SNOWFORT-PTY] Killing PTY process for session ${sessionId}`);
      try {
        ptyProcess.kill();
        delete ptyProcesses[sessionId];
        updateSessionEngine(sessionId, null, 'idle');
      } catch (error) {
        console.error(`[SNOWFORT-PTY] Error killing PTY ${sessionId}:`, error);
      }
    }
  });

  // Add handler to check if PTY exists for a session
  ipcMain.handle('pty:exists', (event, sessionId: string) => {
    return ptyProcesses[sessionId] !== undefined;
  });

  // Add handler to clear PTY terminal (send clear command)
  ipcMain.on('pty:clear', (event, sessionId: string) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      try {
        ptyProcess.write('\x1b[2J\x1b[H'); // Clear screen and move cursor to top
        console.log(`[SNOWFORT-PTY] Cleared terminal for session ${sessionId}`);
      } catch (error) {
        console.error(`[SNOWFORT-PTY] Error clearing PTY ${sessionId}:`, error);
      }
    }
  });
}

// Cleanup on app quit
app.on('before-quit', () => {
  if (database) {
    database.close();
  }
  Object.values(ptyProcesses).forEach(p => p.kill());
});
