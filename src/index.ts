import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import { DatabaseService } from './services/database';
import { EngineManager } from './services/engine-manager';
import { writeFileSync } from 'fs';
import { join } from 'path';
import { platform } from 'os';

// Optional node-pty import - fallback to null if not available
let pty: any = null;
try {
  pty = require('node-pty');
  console.log('[SNOWFORT-PTY] node-pty loaded successfully');
} catch (error) {
  console.warn('[SNOWFORT-PTY] node-pty not available, falling back to engine-based terminal');
}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Initialize services
let database: DatabaseService;
let engineManager: EngineManager;
const ptyProcesses: { [sessionId: string]: any } = {};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 900,
    width: 1400,
    minHeight: 600,
    minWidth: 1000,
    title: 'Snowfort Desktop - AI Agent Orchestration Platform',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
    },
    titleBarStyle: 'hiddenInset',
    trafficLightPosition: { x: 20, y: 20 },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // DevTools control for development
  const isDevelopment = process.env.NODE_ENV === 'development';
  const enableDevTools = process.env.ELECTRON_DISABLE_DEVTOOLS !== 'true' && process.env.SNOWFORT_MCP_MODE !== 'true';
  
  if (isDevelopment && enableDevTools) {
    mainWindow.webContents.openDevTools();
  }
  
  // Always enable remote debugging in development for testing
  if (isDevelopment) {
    mainWindow.webContents.debugger.attach('1.3');
    console.log('[SNOWFORT-DEBUG] Remote debugging enabled for Playwright testing');
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  // Initialize services
  database = new DatabaseService();
  engineManager = new EngineManager(pty, platform());
  
  // Set up IPC handlers
  setupIpcHandlers();
  
  createWindow();
  
  // Detect available engines on startup
  try {
    console.log('[SNOWFORT-STARTUP] Detecting available engines...');
    const availability = await engineManager.detectAvailableEngines();
    console.log('[SNOWFORT-ENGINES]', JSON.stringify(availability));
    
    // Write startup state file for MCP detection
    const stateFile = join(app.getPath('userData'), 'startup-state.json');
    writeFileSync(stateFile, JSON.stringify({
      ready: true,
      timestamp: Date.now(),
      engines: availability,
      pid: process.pid,
      version: app.getVersion()
    }));
    
    console.log('[SNOWFORT-READY] App initialized successfully');
  } catch (error) {
    console.error('[SNOWFORT-ERROR] Engine detection failed during startup:', error);
  }
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// IPC Handlers for communication between main and renderer processes
function setupIpcHandlers() {
  // Database operations
  ipcMain.handle('db:getProjects', () => database.getProjects());
  ipcMain.handle('db:getOrganizations', () => database.getOrganizations());
  ipcMain.handle('db:getSessions', (_, projectId?: string) => database.getSessions(projectId));
  ipcMain.handle('db:createProject', (_, name: string, path: string, orgId?: string) => 
    database.createProject(name, path, orgId));
  ipcMain.handle('db:createSession', (_, projectId: string, name: string, engineType: string) => 
    database.createSession(projectId, name, engineType as any));

  // File system operations
  ipcMain.handle('fs:selectDirectory', async () => {
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory'],
      title: 'Select Project Directory'
    });
    return result.canceled ? null : result.filePaths[0];
  });

  // Engine operations
  ipcMain.handle('engine:detectAvailable', async () => {
    try {
      console.log('Detecting available engines...');
      const availability = await engineManager.detectAvailableEngines();
      console.log('Engine detection result:', availability);
      return availability;
    } catch (error: any) {
      console.error('Engine detection failed:', error);
      // Return safe defaults
      return {
        claude: 'not-installed',
        gemini: 'not-installed', 
        codex: 'not-installed'
      };
    }
  });
  ipcMain.handle('engine:createSession', async (event, sessionId: string, engineType: string, projectPath: string) => {
    try {
      console.log(`Creating engine session: ${sessionId}, type: ${engineType}, path: ${projectPath}`);
      
      // Create session with output and state change callbacks
      await engineManager.createSession(
        sessionId, 
        engineType as any, 
        projectPath,
        // onOutput callback - send output to renderer
        (output: string) => {
          event.sender.send('engine:output', sessionId, output);
        },
        // onStateChange callback - send state updates to renderer
        (state: any) => {
          event.sender.send('engine:stateChange', sessionId, state);
        }
      );
      
      console.log(`Engine session created successfully: ${sessionId}`);
      return { success: true };
    } catch (error: any) {
      console.error(`Failed to create engine session: ${error.message}`, error);
      return { success: false, error: error.message };
    }
  });
  ipcMain.handle('engine:sendCommand', (_, sessionId: string, command: string) => {
    try {
      engineManager.sendCommand(sessionId, command);
      return { success: true };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  });
  
  // Test IPC
  ipcMain.handle('test:ping', () => {
    return 'pong';
  });

  // PTY operations
  ipcMain.on('pty:start', (event, sessionId: string, projectPath: string) => {
    if (!pty) {
      console.warn('[SNOWFORT-PTY] PTY not available, falling back to engine session');
      event.sender.send(`pty:data:${sessionId}`, 'PTY terminal not available. Using engine-based terminal instead.\r\n❯ ');
      return;
    }

    const shell = platform() === 'win32' ? 'powershell.exe' :
                  platform() === 'darwin' ? 'zsh' :
                  'bash';
    
    const args = platform() === 'darwin' ? [] : (platform() === 'linux' ? ['-q', '/dev/null'] : []);

    const ptyProcess = pty.spawn(shell, args, {
      name: 'xterm-color',
      cols: 80,
      rows: 24,
      cwd: projectPath,
      env: {
        ...process.env,
        PATH: platform() === 'win32'
          ? `${process.env.PATH};${process.env.APPDATA}\npm`
          : `${process.env.PATH}:/opt/homebrew/bin:/usr/local/bin`
      }
    });

    ptyProcess.onData((data: string) => {
      event.sender.send(`pty:data:${sessionId}`, data);
    });

    ptyProcess.onExit(({ exitCode }: { exitCode: number }) => {
      event.sender.send(`pty:exit:${sessionId}`, exitCode);
      delete ptyProcesses[sessionId];
    });

    ptyProcesses[sessionId] = ptyProcess;
  });

  ipcMain.on('pty:write', (event, sessionId: string, data: string) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      ptyProcess.write(data);
    }
  });

  ipcMain.on('pty:resize', (event, sessionId: string, { cols, rows }: { cols: number, rows: number }) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      ptyProcess.resize(cols, rows);
    }
  });

  ipcMain.on('pty:kill', (event, sessionId: string) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      ptyProcess.kill();
    }
  });
}

// Cleanup on app quit
app.on('before-quit', () => {
  if (database) {
    database.close();
  }
  Object.values(ptyProcesses).forEach(p => p.kill());
});
