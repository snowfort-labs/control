import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import { DatabaseService } from './services/database';
import { writeFileSync } from 'fs';
import { join } from 'path';
import { platform } from 'os';
import { TaskPlan, Task } from './types/engine';

// Required node-pty import
import * as pty from 'node-pty';
console.log('[SNOWFORT-PTY] node-pty loaded successfully');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Initialize services
let database: DatabaseService;
const ptyProcesses: { [sessionId: string]: any } = {};

// Enhanced Streaming Detection System
interface SessionStreamState {
  sessionId: string;
  buffer: string[];           // Recent output chunks (last 50)
  lastOutput: number;         // Timestamp of last output
  outputFrequency: number[];  // Recent output intervals (last 10)
  currentState: import('./types/engine').SessionStatus;
  currentEngine: import('./types/engine').EngineType | null;
  stateChanged: number;       // When state last changed
  ansiSequences: string[];    // Recent ANSI sequences
  userInput: boolean;         // Whether user recently sent input
  lastUserInput: number;      // Timestamp of last user input
  totalOutputLength: number;  // Track output volume
  lastAnimation: number;      // Timestamp of last animation seen
}

interface ANSIAnalysis {
  hasProgressBar: boolean;
  hasCursorMovement: boolean;
  hasColorChanges: boolean;
  progressPercentage: number | null;
  cleanText: string;
  ansiCount: number;
}

// Session stream state management
const sessionStates: { [sessionId: string]: SessionStreamState } = {};

// Periodic state checker for animation timeouts
setInterval(() => {
  const now = Date.now();
  for (const [sessionId, state] of Object.entries(sessionStates)) {
    // Check if we're working but haven't seen animation for 1.5 seconds
    if (state.currentState === 'working' && (now - state.lastAnimation) > 1500) {
      console.log(`[SNOWFORT-TIMEOUT] Session ${sessionId} animation timeout - switching to ready`);
      state.currentState = 'ready';
      state.stateChanged = now;
      updateSessionEngineWithState(sessionId, state.currentEngine, 'ready');
    }
  }
}, 500); // Check every 500ms

// Visual indicators only - ignore the changing text!
const engineProcessingPatterns = {
  // Claude Code: All bloom animation characters
  claude: [
    /[✻✳✢✽]/,                      // Bloom animation chars: ✻✳✢✽ (and potentially others)
  ],
  
  // Gemini: Braille spinner characters
  gemini: [
    /[⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏]/,          // Any Braille spinner
  ],
  
  // Codex: Bouncing dot between parentheses
  codex: [
    /│\([●\s]*●[●\s]*\)/,           // │(●) with dot anywhere between parens
  ],
};

// Simple ANSI parser (kept for compatibility)
function parseANSI(data: string): ANSIAnalysis {
  const ansiRegex = /\x1b\[[0-9;]*[a-zA-Z]/g;
  const ansiSequences = data.match(ansiRegex) || [];
  
  return {
    hasProgressBar: false, // Not needed anymore
    hasCursorMovement: /\x1b\[\d*[ABCD]/.test(data),
    hasColorChanges: /\x1b\[[0-9;]*m/.test(data),
    progressPercentage: null, // Not needed anymore
    cleanText: data.replace(ansiRegex, ''),
    ansiCount: ansiSequences.length
  };
}

// Initialize session stream state
function initSessionState(sessionId: string): SessionStreamState {
  const now = Date.now();
  return {
    sessionId,
    buffer: [],
    lastOutput: now,
    outputFrequency: [],
    currentState: 'idle',
    currentEngine: null,
    stateChanged: now,
    ansiSequences: [],
    userInput: false,
    lastUserInput: 0,
    totalOutputLength: 0,
    lastAnimation: 0
  };
}

// Analyze output frequency to detect processing states
function analyzeOutputFrequency(state: SessionStreamState): 'high' | 'normal' | 'low' | 'silent' {
  const now = Date.now();
  const timeSinceLastOutput = now - state.lastOutput;
  
  // Silent: No output for >2 seconds after user input
  if (state.userInput && timeSinceLastOutput > 2000) {
    return 'silent';
  }
  
  // High frequency: Multiple outputs within 500ms
  if (state.outputFrequency.length >= 3) {
    const recentOutputs = state.outputFrequency.slice(-3);
    const totalTime = recentOutputs.reduce((sum, interval) => sum + interval, 0);
    if (totalTime < 500) {
      return 'high';
    }
  }
  
  // Low frequency: Long gaps between outputs
  if (timeSinceLastOutput > 1000) {
    return 'low';
  }
  
  return 'normal';
}

// Engine detection patterns
const enginePatterns = {
  'claude-code': {
    start: [/claude(\s|$)/i, /Claude Code/i, /Welcome to Claude Code/i, /claude\s+code/i],
    working: [/I'm working on/i, /Let me/i, /I'll need to/i, /Processing\.\.\./i, /<function_calls>/i, /Reading file/i, /Searching/i],
    ready: [/How can I help/i, /What would you like/i, /I'm ready/i, /🤖 Generated with \[Claude Code\]/i, /How can I assist/i],
    error: [/Error:/i, /Failed to/i, /I cannot/i, /refused/i, /Permission denied/i]
  },
  gemini: {
    start: [/gemini/i, /Gemini CLI/i],
    working: [/Generating/i, /Thinking/i],
    ready: [/gemini>/i, /Ready for input/i],
    error: [/Error:/i, /Authentication failed/i]
  },
  codex: {
    start: [/codex/i, /OpenAI Codex/i],
    working: [/Generating code/i, /Processing request/i],
    ready: [/codex>/i, /Ready/i],
    error: [/Error:/i, /API error/i]
  }
};

// Enhanced process terminal output with streaming detection
function processTerminalOutput(sessionId: string, data: string): void {
  const now = Date.now();
  
  // Initialize session state if not exists
  if (!sessionStates[sessionId]) {
    sessionStates[sessionId] = initSessionState(sessionId);
  }
  
  const state = sessionStates[sessionId];
  
  // Update timing data
  const timeSinceLastOutput = now - state.lastOutput;
  state.outputFrequency.push(timeSinceLastOutput);
  if (state.outputFrequency.length > 10) {
    state.outputFrequency.shift(); // Keep only last 10 intervals
  }
  state.lastOutput = now;
  state.totalOutputLength += data.length;
  
  // Add to buffer (keep last 50 chunks)
  state.buffer.push(data);
  if (state.buffer.length > 50) {
    state.buffer.shift();
  }
  
  // Parse ANSI and analyze streaming patterns
  const ansiAnalysis = parseANSI(data);
  state.ansiSequences.push(...(data.match(/\x1b\[[0-9;]*[a-zA-Z]/g) || []));
  if (state.ansiSequences.length > 20) {
    state.ansiSequences = state.ansiSequences.slice(-20);
  }
  
  // Analyze output frequency
  const frequency = analyzeOutputFrequency(state);
  
  // Enhanced debug logging with streaming info
  if (data.toLowerCase().includes('claude') || data.toLowerCase().includes('welcome') || ansiAnalysis.ansiCount > 0) {
    console.log(`[SNOWFORT-STREAM] Session ${sessionId}: "${data}" [ANSI: ${ansiAnalysis.ansiCount}, Freq: ${frequency}, Progress: ${ansiAnalysis.progressPercentage}%]`);
  }
  
  // Simple streaming state detection
  const newState = determineStreamingState(state, data, ansiAnalysis, frequency);
  if (newState && newState !== state.currentState) {
    console.log(`[SNOWFORT-STREAM] State transition ${state.currentState} → ${newState} - Pattern matched!`);
    state.currentState = newState;
    state.stateChanged = now;
    updateSessionEngineWithState(sessionId, state.currentEngine, newState);
  }
  
  // Engine command detection (keep for initial engine detection)
  const commandPatterns = [
    { regex: /(\$ )?claude(\s|$)/i, engine: 'claude' as const },
    { regex: /claude[\s-]code/i, engine: 'claude' as const },
    { regex: /(\$ )?(gemini|aistudio)(\s|$)/i, engine: 'gemini' as const },
    { regex: /(\$ )?codex(\s|$)/i, engine: 'codex' as const },
  ];
  
  for (const pattern of commandPatterns) {
    if (pattern.regex.test(data)) {
      console.log(`[SNOWFORT-ENGINE] Detected ${pattern.engine} command: ${data.trim()}`);
      state.currentEngine = pattern.engine;
      updateSessionEngineWithState(sessionId, pattern.engine, 'ready');
      return;
    }
  }
  
  // Engine exit detection
  if (/\/exit/i.test(data) || /Goodbye.*Claude/i.test(data) || 
      /^quit$/i.test(data.trim()) || /Goodbye.*Gemini/i.test(data) ||
      /^exit$/i.test(data.trim()) || /Goodbye.*Codex/i.test(data)) {
    console.log(`[SNOWFORT-ENGINE] Engine exit: ${data.trim()}`);
    state.currentEngine = null;
    updateSessionEngineWithState(sessionId, null, 'idle');
    return;
  }
  
  // Shell prompt detection (engine finished)
  const shellPromptPatterns = [
    /^\s*[~$%>]\s+/, /\n[~$%>]\s+$/, 
    /\(\w+\)\s+[\w@.-]+\s+[\w-]+\s+%\s*$/,
    /[\w@-]+:\s*[\w~/.-]+\s*[$%#]\s*$/
  ];
  
  if (shellPromptPatterns.some(pattern => pattern.test(data))) {
    console.log(`[SNOWFORT-ENGINE] Shell prompt detected for session ${sessionId}`);
    setTimeout(() => {
      state.currentEngine = null;
      updateSessionEngineWithState(sessionId, null, 'idle');
    }, 200);
  }
}

// Detect animation start - timeout handled by periodic timer
function determineStreamingState(state: SessionStreamState, data: string, ansi: ANSIAnalysis, frequency: string): import('./types/engine').SessionStatus | null {
  const now = Date.now();
  
  // Check if any engine animation is currently showing
  const hasAnimation = 
    engineProcessingPatterns.claude.some(pattern => pattern.test(data)) ||
    engineProcessingPatterns.gemini.some(pattern => pattern.test(data)) ||
    engineProcessingPatterns.codex.some(pattern => pattern.test(data));
  
  if (hasAnimation) {
    // Mark that we saw animation recently
    state.lastAnimation = now;
    return 'working';
  }
  
  // Timeout logic is handled by periodic timer - no need to check here
  return null;
}


// Track user input to improve state detection
function trackUserInput(sessionId: string): void {
  if (!sessionStates[sessionId]) {
    sessionStates[sessionId] = initSessionState(sessionId);
  }
  
  const state = sessionStates[sessionId];
  state.userInput = true;
  state.lastUserInput = Date.now();
  
  // Reset user input flag after 30 seconds
  setTimeout(() => {
    if (sessionStates[sessionId]) {
      sessionStates[sessionId].userInput = false;
    }
  }, 30000);
}

// Enhanced update function with state management
async function updateSessionEngineWithState(sessionId: string, engineType: string | null, status: string): Promise<void> {
  try {
    const state = sessionStates[sessionId];
    if (state) {
      state.currentEngine = engineType as any;
      state.currentState = status as any;
      state.stateChanged = Date.now();
    }
    
    // Call original update function
    await updateSessionEngine(sessionId, engineType, status);
  } catch (error) {
    console.error(`Failed to update session ${sessionId}:`, error);
  }
}

// Update session with detected engine and status
async function updateSessionEngine(sessionId: string, engineType: string | null, status: string): Promise<void> {
  try {
    const Database = require('better-sqlite3');
    const db = new Database(database.getDatabasePath());
    const session = db.prepare('SELECT * FROM sessions WHERE id = ?').get(sessionId);
    
    if (session) {
      const updates: any = { status };
      
      // Only update active_engine if different
      const currentEngine = session.active_engine;
      if (currentEngine !== engineType) {
        updates.active_engine = engineType;
      }
      
      // Update last_active timestamp
      updates.last_active = new Date().toISOString();
      
      const updateFields = Object.keys(updates).map(key => `${key} = ?`).join(', ');
      const updateValues = Object.values(updates);
      
      db.prepare(`UPDATE sessions SET ${updateFields} WHERE id = ?`).run(...updateValues, sessionId);
      
      console.log(`[SNOWFORT-ENGINE] Session ${sessionId} - Engine: ${engineType || 'none'}, Status: ${status}`);

      // Get the updated session object
      const updatedSessionFromDb = db.prepare('SELECT * FROM sessions WHERE id = ?').get(sessionId) as any;
      const updatedSession = {
        ...updatedSessionFromDb,
        projectId: updatedSessionFromDb.project_id,
        engineType: updatedSessionFromDb.engine_type,
        activeEngine: updatedSessionFromDb.active_engine,
        orderIndex: updatedSessionFromDb.order_index,
        createdAt: updatedSessionFromDb.created_at,
        lastActive: updatedSessionFromDb.last_active,
      };

      // Send the updated session to the renderer process
      const mainWindow = BrowserWindow.getAllWindows()[0];
      if (mainWindow) {
        mainWindow.webContents.send('session:updated', updatedSession);
      }
    }
    
    db.close();
  } catch (error) {
    console.error('Failed to update session engine:', error);
  }
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 900,
    width: 1400,
    minHeight: 600,
    minWidth: 1000,
    title: 'Snowfort Desktop - AI Agent Orchestration Platform',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
    },
    titleBarStyle: 'hiddenInset',
    trafficLightPosition: { x: 20, y: 20 },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // DevTools control for development
  const isDevelopment = process.env.NODE_ENV === 'development';
  const enableDevTools = process.env.ELECTRON_DISABLE_DEVTOOLS !== 'true' && process.env.SNOWFORT_MCP_MODE !== 'true';
  
  if (isDevelopment && enableDevTools) {
    mainWindow.webContents.openDevTools();
  }
  
  // Always enable remote debugging in development for testing
  if (isDevelopment) {
    mainWindow.webContents.debugger.attach('1.3');
    console.log('[SNOWFORT-DEBUG] Remote debugging enabled for Playwright testing');
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  // Initialize services
  database = new DatabaseService();
  
  // Set up IPC handlers
  setupIpcHandlers();
  
  createWindow();
  
  // Write startup state file for MCP detection
  const stateFile = join(app.getPath('userData'), 'startup-state.json');
  writeFileSync(stateFile, JSON.stringify({
    ready: true,
    timestamp: Date.now(),
    pid: process.pid,
    version: app.getVersion()
  }));
  
  console.log('[SNOWFORT-READY] App initialized successfully');
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Task Analysis and GitHub Integration Helper Functions
async function analyzeTaskConflicts(projectId: string, taskIds: string[]): Promise<TaskPlan> {
  try {
    const tasks = database.getTasks(projectId);
    const selectedTasks = tasks.filter(task => taskIds.includes(task.id));
    
    if (selectedTasks.length === 0) {
      throw new Error('No tasks found for analysis');
    }

    // For now, create a basic plan structure
    // TODO: Implement AI-powered conflict analysis
    const plan = database.createTaskPlan(projectId, `Analysis Plan - ${new Date().toISOString()}`, taskIds);
    
    // Basic conflict analysis logic (to be replaced with AI analysis)
    const phases = await performBasicConflictAnalysis(selectedTasks);
    
    return database.updateTaskPlan(plan.id, { phases });
  } catch (error) {
    console.error('Error analyzing task conflicts:', error);
    throw error;
  }
}

async function performBasicConflictAnalysis(tasks: Task[]): Promise<any[]> {
  // This is a placeholder for AI-powered analysis
  // For now, just group tasks into phases
  return [
    {
      id: 'phase-1',
      name: 'Phase 1 - Parallel Tasks',
      order: 0,
      parallelGroups: [
        {
          id: 'group-1',
          taskIds: tasks.map(t => t.id),
          conflictRisk: 25,
          canRunInParallel: true
        }
      ]
    }
  ];
}

async function importGitHubIssues(projectId: string, owner: string, repo: string): Promise<Task[]> {
  try {
    // TODO: Implement GitHub API integration
    // For now, return empty array
    console.log(`Importing GitHub issues from ${owner}/${repo} for project ${projectId}`);
    return [];
  } catch (error) {
    console.error('Error importing GitHub issues:', error);
    throw error;
  }
}

// IPC Handlers for communication between main and renderer processes
function setupIpcHandlers() {
  // Database operations
  ipcMain.handle('db:getProjects', () => database.getProjects());
  ipcMain.handle('db:getOrganizations', () => database.getOrganizations());
  ipcMain.handle('db:getSessions', (_, projectId?: string) => database.getSessions(projectId));
  ipcMain.handle('db:createProject', (_, name: string, path: string, orgId?: string) => 
    database.createProject(name, path, orgId));
  ipcMain.handle('db:createSession', (_, projectId: string, name: string, engineType?: string, initialCommand?: string) => 
    database.createSession(projectId, name, engineType as any, initialCommand));
  ipcMain.handle('db:updateProject', (_, projectId: string, updates: any) => 
    database.updateProject(projectId, updates));
  ipcMain.handle('db:updateSession', (_, sessionId: string, updates: any) => 
    database.updateSession(sessionId, updates));
  ipcMain.handle('db:deleteSession', (_, sessionId: string) => 
    database.deleteSession(sessionId));

  // Task operations
  ipcMain.handle('task:getTasks', (_, projectId: string) => 
    database.getTasks(projectId));
  ipcMain.handle('task:createTask', (_, projectId: string, title: string, body: string, options?: any) => 
    database.createTask(projectId, title, body, options));
  ipcMain.handle('task:updateTask', (_, taskId: string, updates: any) => 
    database.updateTask(taskId, updates));
  ipcMain.handle('task:deleteTask', (_, taskId: string) => 
    database.deleteTask(taskId));

  // Task planning operations
  ipcMain.handle('task:getTaskPlans', (_, projectId: string) => 
    database.getTaskPlans(projectId));
  ipcMain.handle('task:createTaskPlan', (_, projectId: string, name: string, taskIds: string[]) => 
    database.createTaskPlan(projectId, name, taskIds));
  ipcMain.handle('task:updateTaskPlan', (_, planId: string, updates: any) => 
    database.updateTaskPlan(planId, updates));
  ipcMain.handle('task:analyzeTaskConflicts', async (_, projectId: string, taskIds: string[]) => {
    // This will be implemented with AI analysis
    return analyzeTaskConflicts(projectId, taskIds);
  });

  // GitHub integration
  ipcMain.handle('task:importGitHubIssues', async (_, projectId: string, owner: string, repo: string) => {
    // This will be implemented with GitHub API
    return importGitHubIssues(projectId, owner, repo);
  });

  // File system operations
  ipcMain.handle('fs:selectDirectory', async () => {
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory'],
      title: 'Select Project Directory'
    });
    return result.canceled ? null : result.filePaths[0];
  });

  
  // Test IPC
  ipcMain.handle('test:ping', () => {
    return 'pong';
  });

  // PTY operations
  ipcMain.on('pty:start', (event, sessionId: string, projectPath: string) => {
    // Prevent duplicate PTY processes
    if (ptyProcesses[sessionId]) {
      console.log(`[SNOWFORT-PTY] PTY process already exists for session ${sessionId}`);
      return;
    }

    const shell = platform() === 'win32' ? 'powershell.exe' :
                  platform() === 'darwin' ? 'zsh' :
                  'bash';
    
    const args = platform() === 'darwin' ? [] : (platform() === 'linux' ? ['-q', '/dev/null'] : []);

    const ptyProcess = pty.spawn(shell, args, {
      name: 'xterm-color',
      cols: 80,
      rows: 24,
      cwd: projectPath,
      env: {
        ...process.env,
        PATH: platform() === 'win32'
          ? `${process.env.PATH};${process.env.APPDATA}\npm`
          : `${process.env.PATH}:/opt/homebrew/bin:/usr/local/bin`
      }
    });

    ptyProcess.onData((data: string) => {
      // Debug: log all PTY data
      console.log(`[SNOWFORT-PTY-DATA] Session ${sessionId}: "${data}"`);
      
      // Process terminal output for engine detection
      processTerminalOutput(sessionId, data);
      
      // Send data to renderer for display
      event.sender.send(`pty:data:${sessionId}`, data);
    });

    ptyProcess.onExit(({ exitCode }: { exitCode: number }) => {
      console.log(`[SNOWFORT-PTY] PTY process exited for session ${sessionId} with code ${exitCode}`);
      event.sender.send(`pty:exit:${sessionId}`, exitCode);
      delete ptyProcesses[sessionId];
      // Update session status to indicate process ended
      updateSessionEngine(sessionId, null, 'idle');
    });

    ptyProcesses[sessionId] = ptyProcess;
    console.log(`[SNOWFORT-PTY] Started PTY process for session ${sessionId} in ${projectPath}`);
  });

  ipcMain.on('pty:write', (event, sessionId: string, data: string) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      try {
        // Track user input for enhanced state detection
        trackUserInput(sessionId);
        
        ptyProcess.write(data);
        console.log(`[SNOWFORT-STREAM] User input tracked for session ${sessionId}`);
      } catch (error) {
        console.error(`[SNOWFORT-PTY] Error writing to PTY ${sessionId}:`, error);
        updateSessionEngine(sessionId, null, 'error');
      }
    } else {
      console.warn(`[SNOWFORT-PTY] No PTY process found for session ${sessionId}`);
    }
  });

  ipcMain.on('pty:resize', (event, sessionId: string, { cols, rows }: { cols: number, rows: number }) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      try {
        ptyProcess.resize(cols, rows);
      } catch (error) {
        console.error(`[SNOWFORT-PTY] Error resizing PTY ${sessionId}:`, error);
      }
    }
  });

  ipcMain.on('pty:kill', (event, sessionId: string) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      console.log(`[SNOWFORT-PTY] Killing PTY process for session ${sessionId}`);
      try {
        ptyProcess.kill();
        delete ptyProcesses[sessionId];
        updateSessionEngine(sessionId, null, 'idle');
      } catch (error) {
        console.error(`[SNOWFORT-PTY] Error killing PTY ${sessionId}:`, error);
      }
    }
  });

  // Add handler to check if PTY exists for a session
  ipcMain.handle('pty:exists', (event, sessionId: string) => {
    return ptyProcesses[sessionId] !== undefined;
  });

  // Add handler to clear PTY terminal (send clear command)
  ipcMain.on('pty:clear', (event, sessionId: string) => {
    const ptyProcess = ptyProcesses[sessionId];
    if (ptyProcess) {
      try {
        ptyProcess.write('\x1b[2J\x1b[H'); // Clear screen and move cursor to top
        console.log(`[SNOWFORT-PTY] Cleared terminal for session ${sessionId}`);
      } catch (error) {
        console.error(`[SNOWFORT-PTY] Error clearing PTY ${sessionId}:`, error);
      }
    }
  });
}

// Cleanup on app quit
app.on('before-quit', () => {
  if (database) {
    database.close();
  }
  Object.values(ptyProcesses).forEach(p => p.kill());
});
